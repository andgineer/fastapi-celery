{"uid":"344bac9e17422e71","name":"test_celery_boilerplate_send_task","fullName":"backend.tests.test_celery_boilerplate#test_celery_boilerplate_send_task","historyId":"430f1c682b9c240a103a0506ca671561","time":{"start":1717647999110,"stop":1717648000047,"duration":937},"description":"\n    Shows how to test full celery loop - sending and executing task\n    ","descriptionHtml":"<pre><code>Shows how to test full celery loop - sending and executing task\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert == failed. [pytest-clarity diff shown]\n  \u001B[0m\n  \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\n  \u001B[0m\n  \u001B[0m\u001B[32m33\u001B[0m\n  \u001B[0m\u001B[31m55\u001B[0m\n  \u001B[0m","statusTrace":"celery_worker = <Worker: gen2252@fv-az1530-906 (running)>\ncelery_app = <Celery celery.tests at 0x7f2369f520f0>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f2369fe4230>\n\n    def test_celery_boilerplate_send_task(celery_worker, celery_app, monkeypatch):\n        \"\"\"\n        Shows how to test full celery loop - sending and executing task\n        \"\"\"\n        monkeypatch.setattr(app.tasks.debug, \"dummy_function\", lambda: 55)\n        celery_worker.reload(reload=True)\n        result: celery.result.AsyncResult = celery_app.send_task(\"tasks.dummy\")\n        task = celery_app.AsyncResult(id=result.id)\n        while task.state == \"PENDING\":\n            log.info(\"Waiting for task..\")\n            time.sleep(0.3)\n>       assert task.result == 55\nE       assert == failed. [pytest-clarity diff shown]\nE         \u001B[0m\nE         \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\nE         \u001B[0m\nE         \u001B[0m\u001B[32m33\u001B[0m\nE         \u001B[0m\u001B[31m55\u001B[0m\nE         \u001B[0m\n\nbackend/tests/test_celery_boilerplate.py:25: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"celery_enable_logging","time":{"start":1717647998500,"stop":1717647998500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_includes","time":{"start":1717647998501,"stop":1717647998501,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_worker_pool","time":{"start":1717647998501,"stop":1717647998501,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_worker_parameters","time":{"start":1717647998502,"stop":1717647998502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_config","time":{"start":1717647998502,"stop":1717647998502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_celery_app_trap","time":{"start":1717647998502,"stop":1717647998502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_parameters","time":{"start":1717647998502,"stop":1717647998502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_app","time":{"start":1717647998503,"stop":1717647998513,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_worker","time":{"start":1717647998513,"stop":1717647998847,"duration":334},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch","time":{"start":1717647998847,"stop":1717647998847,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"db","time":{"start":1717647998848,"stop":1717647999107,"duration":259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1717647998848,"stop":1717647998848,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    Shows how to test full celery loop - sending and executing task\n    ","status":"failed","statusMessage":"AssertionError: assert == failed. [pytest-clarity diff shown]\n  \u001B[0m\n  \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\n  \u001B[0m\n  \u001B[0m\u001B[32m33\u001B[0m\n  \u001B[0m\u001B[31m55\u001B[0m\n  \u001B[0m","statusTrace":"celery_worker = <Worker: gen2252@fv-az1530-906 (running)>\ncelery_app = <Celery celery.tests at 0x7f2369f520f0>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f2369fe4230>\n\n    def test_celery_boilerplate_send_task(celery_worker, celery_app, monkeypatch):\n        \"\"\"\n        Shows how to test full celery loop - sending and executing task\n        \"\"\"\n        monkeypatch.setattr(app.tasks.debug, \"dummy_function\", lambda: 55)\n        celery_worker.reload(reload=True)\n        result: celery.result.AsyncResult = celery_app.send_task(\"tasks.dummy\")\n        task = celery_app.AsyncResult(id=result.id)\n        while task.state == \"PENDING\":\n            log.info(\"Waiting for task..\")\n            time.sleep(0.3)\n>       assert task.result == 55\nE       assert == failed. [pytest-clarity diff shown]\nE         \u001B[0m\nE         \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\nE         \u001B[0m\nE         \u001B[0m\u001B[32m33\u001B[0m\nE         \u001B[0m\u001B[31m55\u001B[0m\nE         \u001B[0m\n\nbackend/tests/test_celery_boilerplate.py:25: AssertionError","steps":[],"attachments":[{"uid":"8a79b32cb6e54562","name":"log","source":"8a79b32cb6e54562.txt","type":"text/plain","size":664}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"db::0","time":{"start":1717648000075,"stop":1717648000076,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch::0","time":{"start":1717648000077,"stop":1717648000077,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_worker::0","time":{"start":1717648000078,"stop":1717648001835,"duration":1757},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_app::0","time":{"start":1717648001836,"stop":1717648001836,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"backend.tests"},{"name":"suite","value":"test_celery_boilerplate"},{"name":"host","value":"fv-az1530-906"},{"name":"thread","value":"2252-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"backend.tests.test_celery_boilerplate"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":10},"items":[{"uid":"de958e358c696999","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/57//#testresult/de958e358c696999","status":"passed","time":{"start":1717647860921,"stop":1717647861838,"duration":917}},{"uid":"80a9727fe0dace81","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/56//#testresult/80a9727fe0dace81","status":"passed","time":{"start":1717575356147,"stop":1717575357064,"duration":917}},{"uid":"39006864d7d42ae5","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/55//#testresult/39006864d7d42ae5","status":"passed","time":{"start":1717347223817,"stop":1717347224735,"duration":918}},{"uid":"2b900cea354ed09f","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/54//#testresult/2b900cea354ed09f","status":"failed","statusDetails":"AssertionError: assert == failed. [pytest-clarity diff shown]\n  \u001B[0m\n  \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\n  \u001B[0m\n  \u001B[0m\u001B[32m33\u001B[0m\n  \u001B[0m\u001B[31m55\u001B[0m\n  \u001B[0m","time":{"start":1717130821125,"stop":1717130822066,"duration":941}},{"uid":"5d3ecad2f3799e85","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/52//#testresult/5d3ecad2f3799e85","status":"failed","statusDetails":"AssertionError: assert == failed. [pytest-clarity diff shown]\n  \u001B[0m\n  \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\n  \u001B[0m\n  \u001B[0m\u001B[32m33\u001B[0m\n  \u001B[0m\u001B[31m55\u001B[0m\n  \u001B[0m","time":{"start":1717129480415,"stop":1717129481355,"duration":940}},{"uid":"269e5b4d2d5c0866","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/50//#testresult/269e5b4d2d5c0866","status":"failed","statusDetails":"AssertionError: assert == failed. [pytest-clarity diff shown]\n  \u001B[0m\n  \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\n  \u001B[0m\n  \u001B[0m\u001B[32m33\u001B[0m\n  \u001B[0m\u001B[31m55\u001B[0m\n  \u001B[0m","time":{"start":1716898269447,"stop":1716898270686,"duration":1239}},{"uid":"47c6a71a839f199d","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/48//#testresult/47c6a71a839f199d","status":"passed","time":{"start":1716820374365,"stop":1716820375573,"duration":1208}},{"uid":"8d8b9c707c77e3be","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/47//#testresult/8d8b9c707c77e3be","status":"passed","time":{"start":1716820004474,"stop":1716820005679,"duration":1205}},{"uid":"f735e1a1d73eeb08","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/46//#testresult/f735e1a1d73eeb08","status":"passed","time":{"start":1716819844408,"stop":1716819845612,"duration":1204}}]},"tags":[]},"source":"344bac9e17422e71.json","parameterValues":[]}