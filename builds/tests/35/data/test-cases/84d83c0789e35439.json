{"uid":"84d83c0789e35439","name":"test_words_count[../map_reduce_data]","fullName":"tests.api.v1.map_reduce.test_words_count#test_words_count","historyId":"9d63953c2413cecd8b73a0975eba2ea9","time":{"start":1716264131014,"stop":1716264451987,"duration":320973},"status":"failed","statusMessage":"Failed: Enumeration result is being in status `202` more than 300.0 secs","statusTrace":"data_path = PosixPath('/tmp/pytest-of-runner/pytest-0/popen-gw1/test_words_count____map_reduce0')\nclient = <fixtures.client.TextClientWithTools object at 0x7fbd069e4bf0>\ncelery_session_worker = <Worker: gen2378@fv-az1242-162 (running)>\ncelery_session_app = <Celery celery.tests at 0x7fbd06977620>\n\n    @pytest.mark.parametrize(\"data_path\", [(\"../map_reduce_data\")], indirect=[\"data_path\"])\n    def test_words_count(data_path, client, celery_session_worker, celery_session_app):\n        words_file_path = data_path / \"words.txt\"\n        with words_file_path.open() as words_file:\n            response: Response = client.post(\n                \"/api/words\",\n                files={\n                    \"text\": (\"text.txt\", words_file.read()),\n                },\n                follow_redirects=False,\n            )\n        assert response.status_code == status.HTTP_303_SEE_OTHER\n        uri = response.headers[\"Location\"]\n        assert len(uri) > 20\n        assert uri.startswith(\"/api/words/\")\n>       response = wait_for_http_status(\n            lambda: client.get(uri),\n            max_wait_seconds=300,\n        )\n\ntests/api/v1/map_reduce/test_words_count.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhttp_request = <function test_words_count.<locals>.<lambda> at 0x7fbd04b19580>\nwait_for_status = frozenset({200}), response_func = None, max_wait_seconds = 300\nsleep_seconds = 0.3\n\n    def wait_for_http_status(\n        http_request: Callable[[], Response],\n        wait_for_status: Union[Tuple, FrozenSet, Set, List] = frozenset(\n            {status.HTTP_200_OK}\n        ),\n        response_func: Callable[[Response], bool] = None,\n        max_wait_seconds: float = 30,  # with xdist we really need as much on my macbook pro\n        sleep_seconds: float = 0.3,\n    ) -> Response:\n        \"\"\"\n        Waits for `http_request(uri)` to return result.status_code from\n        `wait_for_status` (by default `(200,)`).\n        Optionally exit before that if the `response_func(response).json()` returns True\n    \n        pytest.fail if it won't happen before `max_wait_seconds`.\n        After each check sleeps fo `sleep_seconds`.\n    \n        Returns the request's result.\n        \"\"\"\n        waiting_time = 0\n        response = None\n        while waiting_time < max_wait_seconds:\n            response = http_request()\n            if response.status_code in wait_for_status:\n                break\n            if response.status_code != status.HTTP_202_ACCEPTED:\n                pytest.fail(f\"Unexpected HTTP status `{response.status_code}`\")\n            if response_func is not None and response_func(response.json()):\n                break\n            time.sleep(sleep_seconds)\n            waiting_time += sleep_seconds\n        else:\n            if response is not None:\n>               pytest.fail(\n                    f\"Enumeration result is being in status `{response.status_code}` \"\n                    f\"more than {waiting_time:.5} secs\"\n                )\nE               Failed: Enumeration result is being in status `202` more than 300.0 secs\n\ntests/api/wait_for_http_status.py:47: Failed","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"celery_enable_logging","time":{"start":1716264129597,"stop":1716264129598,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"client","time":{"start":1716264129598,"stop":1716264129600,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_config","time":{"start":1716264129600,"stop":1716264129601,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_session_app","time":{"start":1716264129601,"stop":1716264129611,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_parameters","time":{"start":1716264129601,"stop":1716264129601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"use_celery_app_trap","time":{"start":1716264129601,"stop":1716264129601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_includes","time":{"start":1716264129611,"stop":1716264129612,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_class_tasks","time":{"start":1716264129612,"stop":1716264129612,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_session_worker","time":{"start":1716264129612,"stop":1716264130921,"duration":1309},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_worker_parameters","time":{"start":1716264129612,"stop":1716264129612,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_worker_pool","time":{"start":1716264129612,"stop":1716264129612,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"tmp_path_factory","time":{"start":1716264130922,"stop":1716264130922,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"tmp_path","time":{"start":1716264130922,"stop":1716264130923,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"tmpdir","time":{"start":1716264130923,"stop":1716264130923,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"data_path","time":{"start":1716264130923,"stop":1716264130924,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1716264130924,"stop":1716264130924,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"db","time":{"start":1716264130924,"stop":1716264131011,"duration":87},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: Enumeration result is being in status `202` more than 300.0 secs","statusTrace":"data_path = PosixPath('/tmp/pytest-of-runner/pytest-0/popen-gw1/test_words_count____map_reduce0')\nclient = <fixtures.client.TextClientWithTools object at 0x7fbd069e4bf0>\ncelery_session_worker = <Worker: gen2378@fv-az1242-162 (running)>\ncelery_session_app = <Celery celery.tests at 0x7fbd06977620>\n\n    @pytest.mark.parametrize(\"data_path\", [(\"../map_reduce_data\")], indirect=[\"data_path\"])\n    def test_words_count(data_path, client, celery_session_worker, celery_session_app):\n        words_file_path = data_path / \"words.txt\"\n        with words_file_path.open() as words_file:\n            response: Response = client.post(\n                \"/api/words\",\n                files={\n                    \"text\": (\"text.txt\", words_file.read()),\n                },\n                follow_redirects=False,\n            )\n        assert response.status_code == status.HTTP_303_SEE_OTHER\n        uri = response.headers[\"Location\"]\n        assert len(uri) > 20\n        assert uri.startswith(\"/api/words/\")\n>       response = wait_for_http_status(\n            lambda: client.get(uri),\n            max_wait_seconds=300,\n        )\n\ntests/api/v1/map_reduce/test_words_count.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhttp_request = <function test_words_count.<locals>.<lambda> at 0x7fbd04b19580>\nwait_for_status = frozenset({200}), response_func = None, max_wait_seconds = 300\nsleep_seconds = 0.3\n\n    def wait_for_http_status(\n        http_request: Callable[[], Response],\n        wait_for_status: Union[Tuple, FrozenSet, Set, List] = frozenset(\n            {status.HTTP_200_OK}\n        ),\n        response_func: Callable[[Response], bool] = None,\n        max_wait_seconds: float = 30,  # with xdist we really need as much on my macbook pro\n        sleep_seconds: float = 0.3,\n    ) -> Response:\n        \"\"\"\n        Waits for `http_request(uri)` to return result.status_code from\n        `wait_for_status` (by default `(200,)`).\n        Optionally exit before that if the `response_func(response).json()` returns True\n    \n        pytest.fail if it won't happen before `max_wait_seconds`.\n        After each check sleeps fo `sleep_seconds`.\n    \n        Returns the request's result.\n        \"\"\"\n        waiting_time = 0\n        response = None\n        while waiting_time < max_wait_seconds:\n            response = http_request()\n            if response.status_code in wait_for_status:\n                break\n            if response.status_code != status.HTTP_202_ACCEPTED:\n                pytest.fail(f\"Unexpected HTTP status `{response.status_code}`\")\n            if response_func is not None and response_func(response.json()):\n                break\n            time.sleep(sleep_seconds)\n            waiting_time += sleep_seconds\n        else:\n            if response is not None:\n>               pytest.fail(\n                    f\"Enumeration result is being in status `{response.status_code}` \"\n                    f\"more than {waiting_time:.5} secs\"\n                )\nE               Failed: Enumeration result is being in status `202` more than 300.0 secs\n\ntests/api/wait_for_http_status.py:47: Failed","steps":[],"attachments":[{"uid":"b937143866dab19","name":"log","source":"b937143866dab19.txt","type":"text/plain","size":563718}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"tmp_path::0","time":{"start":1716264452027,"stop":1716264452027,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"db::0","time":{"start":1716264452059,"stop":1716264452060,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_session_worker::0","time":{"start":1716264452062,"stop":1716264453999,"duration":1937},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"celery_session_app::0","time":{"start":1716264454002,"stop":1716264454002,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.api.v1.map_reduce"},{"name":"suite","value":"test_words_count"},{"name":"host","value":"fv-az1242-162"},{"name":"thread","value":"2378-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.v1.map_reduce.test_words_count"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data_path","value":"'../map_reduce_data'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":7},"items":[{"uid":"e0ad1807d8750b6c","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/34//#testresult/e0ad1807d8750b6c","status":"passed","time":{"start":1716217502194,"stop":1716217521652,"duration":19458}},{"uid":"781fb578e42bc82c","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/33//#testresult/781fb578e42bc82c","status":"passed","time":{"start":1716216725421,"stop":1716216778250,"duration":52829}},{"uid":"de001b9d5ab74193","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/32//#testresult/de001b9d5ab74193","status":"passed","time":{"start":1716112213079,"stop":1716112359362,"duration":146283}},{"uid":"507cb0733f5a9dd","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/31//#testresult/507cb0733f5a9dd","status":"passed","time":{"start":1716023109156,"stop":1716023164355,"duration":55199}},{"uid":"3231ad5f86225d62","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/30//#testresult/3231ad5f86225d62","status":"passed","time":{"start":1716022486992,"stop":1716022519647,"duration":32655}},{"uid":"a0d1b3a6d4465f2","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/29//#testresult/a0d1b3a6d4465f2","status":"passed","time":{"start":1716021919259,"stop":1716021921777,"duration":2518}}]},"tags":[]},"source":"84d83c0789e35439.json","parameterValues":["'../map_reduce_data'"]}