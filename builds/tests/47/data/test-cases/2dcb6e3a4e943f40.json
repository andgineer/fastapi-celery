{"uid":"2dcb6e3a4e943f40","name":"test_celery_boilerplate_task_direct","fullName":"backend.tests.test_celery_boilerplate#test_celery_boilerplate_task_direct","historyId":"9b8dc4f07f3c3618cd3c11994b415b6c","time":{"start":1716820000801,"stop":1716820001657,"duration":856},"description":"\n    Shows how to test celery tasks with test worker\n    ","descriptionHtml":"<pre><code>Shows how to test celery tasks with test worker\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert == failed. [pytest-clarity diff shown]\n  \u001B[0m\n  \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\n  \u001B[0m\n  \u001B[0m\u001B[32m33\u001B[0m\n  \u001B[0m\u001B[31m44\u001B[0m\n  \u001B[0m","statusTrace":"celery_worker = <Worker: gen2394@fv-az1114-972 (running)>\ncelery_app = <Celery celery.tests at 0x7f64bf906570>\n\n    def test_celery_boilerplate_task_direct(celery_worker, celery_app):\n        \"\"\"\n        Shows how to test celery tasks with test worker\n        \"\"\"\n        with patch(\"app.tasks.debug.dummy_function\") as function_mock:\n            time.sleep(0.3)  # give worker time to get patched function\n            function_mock.return_value = 44\n>           assert app.tasks.debug.dummy_task.delay().get(timeout=10) == 44\nE           assert == failed. [pytest-clarity diff shown]\nE             \u001B[0m\nE             \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\nE             \u001B[0m\nE             \u001B[0m\u001B[32m33\u001B[0m\nE             \u001B[0m\u001B[31m44\u001B[0m\nE             \u001B[0m\n\nbackend/tests/test_celery_boilerplate.py:19: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"celery_enable_logging","time":{"start":1716820000232,"stop":1716820000232,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_includes","time":{"start":1716820000233,"stop":1716820000233,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_worker_pool","time":{"start":1716820000233,"stop":1716820000234,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_config","time":{"start":1716820000234,"stop":1716820000234,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_worker_parameters","time":{"start":1716820000234,"stop":1716820000234,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_parameters","time":{"start":1716820000234,"stop":1716820000234,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_app","time":{"start":1716820000235,"stop":1716820000243,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_celery_app_trap","time":{"start":1716820000235,"stop":1716820000235,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_worker","time":{"start":1716820000244,"stop":1716820000535,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1716820000535,"stop":1716820000535,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"db","time":{"start":1716820000535,"stop":1716820000797,"duration":262},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    Shows how to test celery tasks with test worker\n    ","status":"failed","statusMessage":"AssertionError: assert == failed. [pytest-clarity diff shown]\n  \u001B[0m\n  \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\n  \u001B[0m\n  \u001B[0m\u001B[32m33\u001B[0m\n  \u001B[0m\u001B[31m44\u001B[0m\n  \u001B[0m","statusTrace":"celery_worker = <Worker: gen2394@fv-az1114-972 (running)>\ncelery_app = <Celery celery.tests at 0x7f64bf906570>\n\n    def test_celery_boilerplate_task_direct(celery_worker, celery_app):\n        \"\"\"\n        Shows how to test celery tasks with test worker\n        \"\"\"\n        with patch(\"app.tasks.debug.dummy_function\") as function_mock:\n            time.sleep(0.3)  # give worker time to get patched function\n            function_mock.return_value = 44\n>           assert app.tasks.debug.dummy_task.delay().get(timeout=10) == 44\nE           assert == failed. [pytest-clarity diff shown]\nE             \u001B[0m\nE             \u001B[0m\u001B[32mLHS\u001B[0m vs \u001B[31mRHS\u001B[0m shown below\nE             \u001B[0m\nE             \u001B[0m\u001B[32m33\u001B[0m\nE             \u001B[0m\u001B[31m44\u001B[0m\nE             \u001B[0m\n\nbackend/tests/test_celery_boilerplate.py:19: AssertionError","steps":[],"attachments":[{"uid":"badd3e77b62497c7","name":"log","source":"badd3e77b62497c7.txt","type":"text/plain","size":473}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"db::0","time":{"start":1716820001685,"stop":1716820001686,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_worker::0","time":{"start":1716820001687,"stop":1716820004430,"duration":2743},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"celery_app::0","time":{"start":1716820004431,"stop":1716820004431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"backend.tests"},{"name":"suite","value":"test_celery_boilerplate"},{"name":"host","value":"fv-az1114-972"},{"name":"thread","value":"2394-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"backend.tests.test_celery_boilerplate"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"5141b0e9fd5317bc","reportUrl":"https://andgineer.github.io/fastapi-celery/builds/tests/46//#testresult/5141b0e9fd5317bc","status":"passed","time":{"start":1716819840675,"stop":1716819841809,"duration":1134}}]},"tags":[]},"source":"2dcb6e3a4e943f40.json","parameterValues":[]}